<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="generator" content="pandoc" />
  <title>Vertex Cover Problem | Set 2 (Dynamic Programming Solution for Tree)</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css" />
</head>
<body>
<div id="vertex-cover-problem-set-2-dynamic-programming-solution-for-tree" class="section level1">
<h1>Vertex Cover Problem | Set 2 (Dynamic Programming Solution for Tree)</h1>
<p>A <a href="http://www.geeksforgeeks.org/vertex-cover-problem-set-1-introduction-approximate-algorithm-2/">vertex cover of an undirected graph</a> is a subset of its vertices such that for every edge (u, v) of the graph, either ‘u’ or ‘v’ is in vertex cover.<span id="more-134278"></span> Although the name is Vertex Cover, the set covers all edges of the given graph.<br /> The problem to find minimum size vertex cover of a graph is <a href="http://www.geeksforgeeks.org/np-completeness-set-1/">NP complete</a>. But it can be solved in polynomial time for trees. In this post a solution for Binary Tree is discussed. The same solution can be extended for n-ary trees.</p>
<p>For example, consider the following binary tree. The smallest vertex cover is {20, 50, 30} and size of the vertex cover is 3.<br /> <a href="http://www.geeksforgeeks.org/vertex-cover-problem-set-2-dynamic-programming-solution-tree/largestindependentset1/"><img src="media/file36.png" alt="LargestIndependentSet1" /></a></p>
<p>The idea is to consider following two possibilities for root and recursively for all nodes down the root.<br /> <em><strong>1) Root is part of vertex cover:</strong></em> In this case root covers all children edges. We recursively calculate size of vertex covers for left and right subtrees and add 1 to the result (for root).</p>
<p><em><strong>2) Root is not part of vertex cover:</strong></em> In this case, both children of root must be included in vertex cover to cover all root to children edges. We recursively calculate size of vertex covers of all grandchildren and number of children to the result (for two children of root).</p>
<p>Below is C implementation of above idea.</p>
<pre><code> 
// A naive recursive C implementation for vertex cover problem for a tree
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

// A utility function to find min of two integers
int min(int x, int y) { return (x &lt; y)? x: y; }

/* A binary tree node has data, pointer to left child and a pointer to
   right child */
struct node
{
    int data;
    struct node *left, *right;
};

// The function returns size of the minimum vertex cover
int vCover(struct node *root)
{
    // The size of minimum vertex cover is zero if tree is empty or there
    // is only one node
    if (root == NULL)
        return 0;
    if (root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL)
        return 0;

    // Calculate size of vertex cover when root is part of it
    int size_incl = 1 + vCover(root-&gt;left) + vCover(root-&gt;right);

    // Calculate size of vertex cover when root is not part of it
    int size_excl = 0;
    if (root-&gt;left)
      size_excl += 1 + vCover(root-&gt;left-&gt;left) + vCover(root-&gt;left-&gt;right);
    if (root-&gt;right)
      size_excl += 1 + vCover(root-&gt;right-&gt;left) + vCover(root-&gt;right-&gt;right);

    // Return the minimum of two sizes
    return min(size_incl, size_excl);
}

// A utility function to create a node
struct node* newNode( int data )
{
    struct node* temp = (struct node *) malloc( sizeof(struct node) );
    temp-&gt;data = data;
    temp-&gt;left = temp-&gt;right = NULL;
    return temp;
}

// Driver program to test above functions
int main()
{
    // Let us construct the tree given in the above diagram
    struct node *root         = newNode(20);
    root-&gt;left                = newNode(8);
    root-&gt;left-&gt;left          = newNode(4);
    root-&gt;left-&gt;right         = newNode(12);
    root-&gt;left-&gt;right-&gt;left   = newNode(10);
    root-&gt;left-&gt;right-&gt;right  = newNode(14);
    root-&gt;right               = newNode(22);
    root-&gt;right-&gt;right        = newNode(25);

    printf (&quot;Size of the smallest vertex cover is %d &quot;, vCover(root));

    return 0;
}
 </code></pre>
<p>Output:</p>
<pre><code> Size of the smallest vertex cover is 3 </code></pre>
<p>Time complexity of the above naive recursive approach is exponential. It should be noted that the above function computes the same subproblems again and again. For example, vCover of node with value 50 is evaluated twice as 50 is grandchild of 10 and child of 20.<br /> Since same suproblems are called again, this problem has Overlapping Subprolems property. So Vertex Cover problem has both properties (see <a href="http://www.geeksforgeeks.org/archives/12635">this</a>and <a href="http://www.geeksforgeeks.org/archives/12819">this</a>) of a dynamic programming problem. Like other typical <a href="http://www.geeksforgeeks.org/archives/tag/dynamic-programming">Dynamic Programming(DP) problems,</a> re-computations of same subproblems can be avoided by storing the solutions to subproblems and solving problems in bottom up manner.</p>
<p>Following is C implementation of Dynamic Programming based solution. In the following solution, an additional field ‘vc’ is added to tree nodes. The initial value of ‘vc’ is set as 0 for all nodes. The recursive function vCover() calculates ‘vc’ for a node only if it is not already set.</p>
<pre><code> 
/* Dynamic programming based program for Vertex Cover problem for 
   a Binary Tree */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

// A utility function to find min of two integers
int min(int x, int y) { return (x &lt; y)? x: y; }

/* A binary tree node has data, pointer to left child and a pointer to
   right child */
struct node
{
    int data;
    int vc;
    struct node *left, *right;
};

// A memoization based function that returns size of the minimum vertex cover.
int vCover(struct node *root)
{
    // The size of minimum vertex cover is zero if tree is empty or there
    // is only one node
    if (root == NULL)
        return 0;
    if (root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL)
        return 0;

    // If vertex cover for this node is already evaluated, then return it
    // to save recomputation of same subproblem again.
    if (root-&gt;vc != 0)
        return root-&gt;vc;

    // Calculate size of vertex cover when root is part of it
    int size_incl = 1 + vCover(root-&gt;left) + vCover(root-&gt;right);

    // Calculate size of vertex cover when root is not part of it
    int size_excl = 0;
    if (root-&gt;left)
      size_excl += 1 + vCover(root-&gt;left-&gt;left) + vCover(root-&gt;left-&gt;right);
    if (root-&gt;right)
      size_excl += 1 + vCover(root-&gt;right-&gt;left) + vCover(root-&gt;right-&gt;right);

    // Minimum of two values is vertex cover, store it before returning
    root-&gt;vc =  min(size_incl, size_excl);

    return root-&gt;vc;
}

// A utility function to create a node
struct node* newNode( int data )
{
    struct node* temp = (struct node *) malloc( sizeof(struct node) );
    temp-&gt;data = data;
    temp-&gt;left = temp-&gt;right = NULL;
    temp-&gt;vc = 0; // Set the vertex cover as 0
    return temp;
}

// Driver program to test above functions
int main()
{
    // Let us construct the tree given in the above diagram
    struct node *root         = newNode(20);
    root-&gt;left                = newNode(8);
    root-&gt;left-&gt;left          = newNode(4);
    root-&gt;left-&gt;right         = newNode(12);
    root-&gt;left-&gt;right-&gt;left   = newNode(10);
    root-&gt;left-&gt;right-&gt;right  = newNode(14);
    root-&gt;right               = newNode(22);
    root-&gt;right-&gt;right        = newNode(25);

    printf (&quot;Size of the smallest vertex cover is %d &quot;, vCover(root));

    return 0;
}
 </code></pre>
<p>Output:</p>
<pre><code> Size of the smallest vertex cover is 3 </code></pre>
<p><strong>References:</strong><br /> <a href="http://courses.csail.mit.edu/6.006/spring11/lectures/lec21.pdf" class="uri">http://courses.csail.mit.edu/6.006/spring11/lectures/lec21.pdf</a></p>
<p><strong>Exercise:</strong><br /> Extend the above solution for n-ary trees.</p>
<p>This article is contributed by <strong>Udit Gupta</strong>. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above</p>
<p><br /></p>
<div id="source-56" class="section level3">
<h3>Source</h3>
<p><a href="http://www.geeksforgeeks.org/vertex-cover-problem-set-2-dynamic-programming-solution-tree/" class="uri">http://www.geeksforgeeks.org/vertex-cover-problem-set-2-dynamic-programming-solution-tree/</a></p>
</div>
</div>
</body>
</html>


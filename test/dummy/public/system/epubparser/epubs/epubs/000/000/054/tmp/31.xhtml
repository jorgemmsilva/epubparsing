<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="generator" content="pandoc" />
  <title>Dynamic Programming | Set 21 (Variations of LIS)</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css" />
</head>
<body>
<div id="dynamic-programming-set-21-variations-of-lis" class="section level1">
<h1>Dynamic Programming | Set 21 (Variations of LIS)</h1>
<p>We have discussed Dynamic Programming solution for Longest Increasing Subsequence problem in <a href="http://www.geeksforgeeks.org/archives/12832">this</a>post and a O(nLogn) solution in <a href="http://www.geeksforgeeks.org/archives/9591">this</a>post. <span id="more-19255"></span>Following are commonly asked variations of the standard<a href="http://www.geeksforgeeks.org/archives/12832">LIS problem</a>.</p>
<p><strong>1. Building Bridges:</strong> Consider a 2-D map with a horizontal river passing through its center. There are n cities on the southern bank with x-coordinates a(1) … a(n) and n cities on the northern bank with x-coordinates b(1) … b(n). You want to connect as many north-south pairs of cities as possible with bridges such that no two bridges cross. When connecting cities, you can only connect city i on the northern bank to city i on the southern bank.</p>
<pre><code> 
8     1     4     3     5     2     6     7  

--------------------------------------------
  
--------------------------------------------
1     2     3     4     5     6     7     8

 </code></pre>
<p>Source:<a href="http://people.csail.mit.edu/bdean/6.046/dp/">Dynamic Programming Practice Problems</a>. The link also has well explained solution for the problem.</p>
<p><br /> <strong>2. Maximum Sum Increasing Subsequence:</strong> Given an array of n positive integers. Write a program to find the maximum sum subsequence of the given array such that the intgers in the subsequence are sorted in increasing order. For example, if input is {1, 101, 2, 3, 100, 4, 5}, then output should be {1, 2, 3, 100}. The solution to this problem has been published <a href="http://www.geeksforgeeks.org/archives/19248">here</a>.</p>
<p><br /> <strong>3. The Longest Chain</strong> You are given pairs of numbers. In a pair, the first number is smaller with respect to the second number. Suppose you have two sets (a, b) and (c, d), the second set can follow the first set if b here.</p>
<p><br /> <strong>4. Box Stacking</strong> You are given a set of n types of rectangular 3-D boxes, where the i^th box has height h(i), width w(i) and depth d(i) (all real numbers). You want to create a stack of boxes which is as tall as possible, but you can only stack a box on top of another box if the dimensions of the 2-D base of the lower box are each strictly larger than those of the 2-D base of the higher box. Of course, you can rotate a box so that any side functions as its base. It is also allowable to use multiple instances of the same type of box.<br /> Source:<a href="http://people.csail.mit.edu/bdean/6.046/dp/">Dynamic Programming Practice Problems</a>. The link also has well explained solution for the problem.</p>
<p><br /> Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>
<p><br /></p>
<div id="source-26" class="section level3">
<h3>Source</h3>
<p><a href="http://www.geeksforgeeks.org/dynamic-programming-set-14-variations-of-lis/" class="uri">http://www.geeksforgeeks.org/dynamic-programming-set-14-variations-of-lis/</a></p>
</div>
</div>
</body>
</html>


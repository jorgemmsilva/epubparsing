<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="generator" content="pandoc" />
  <title>Dynamic Programming | Set 34 (Assembly Line Scheduling)</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css" />
</head>
<body>
<div id="dynamic-programming-set-34-assembly-line-scheduling" class="section level1">
<h1>Dynamic Programming | Set 34 (Assembly Line Scheduling)</h1>
<p>A car factory has two assembly lines, each with n stations. A station is denoted by S<sub>i,j</sub> where i is either 1 or 2 and indicates the assembly line the station is on, and j indicates the number of the station. <span id="more-120293"></span>The time taken per station is denoted by a<sub>i,j</sub>. Each station is dedicated to some sort of work like engine fitting, body fitting, painting and so on. So, a car chassis must pass through each of the n stations in order before exiting the factory. The parallel stations of the two assembly lines perform the same task. After it passes through station S<sub>i,j</sub>, it will continue to station S<sub>i,j+1</sub> unless it decides to transfer to the other line. Continuing on the same line incurs no extra cost, but transferring from line i at station j – 1 to station j on the other line takes time t<sub>i,j</sub>. Each assembly line takes an entry time e<sub>i</sub> and exit time x<sub>i</sub> which may be different for the two lines. Give an algorithm for computing the minimum time it will take to build a car chassis.</p>
<p>The below figure presents the problem in a clear picture:<br /> <a href="http://d2hc1qfcrygj4j.cloudfront.net//wp-content/uploads/Figure-1.jpg"><img src="media/file22.jpg" alt="Figure-1" /></a></p>
<p>The following information can be extracted from the problem statement to make it simpler:</p>
<ul>
<li>Two assembly lines, 1 and 2, each with stations from 1 to n.</li>
<li>A car chassis must pass through all stations from 1 to n in order(in any of the two assembly lines). i.e. it cannot jump from station i to station j if they are not at one move distance.</li>
<li>The car chassis can move one station forward in the same line, or one station diagonally in the other line. It incurs an extra cost ti, j to move to station j from line i. No cost is incurred for movement in same line.</li>
<li>The time taken in station j on line i is a<sub>i, j</sub>.</li>
<li>S<sub>i, j</sub> represents a station j on line i.</li>
</ul>
<p><strong>Breaking the problem into smaller sub-problems:</strong><br /> We can easily find the ith factorial if (i-1)th factorial is known. Can we apply the similar funda here?<br /> If the minimum time taken by the chassis to leave station S<sub>i, j-1</sub> is known, the minimum time taken to leave station S<sub>i, j</sub> can be calculated quickly by combining a<sub>i, j</sub> and t<sub>i, j</sub>.</p>
<p><strong>T1(j)</strong> indicates the minimum time taken by the car chassis to leave station j on assembly line 1.</p>
<p><strong>T2(j)</strong> indicates the minimum time taken by the car chassis to leave station j on assembly line 2.</p>
<p><em><strong>Base cases:</strong></em><br /> The entry time e<sub>i</sub> comes into picture only when the car chassis enters the car factory.</p>
<p>Time taken to leave first station in line 1 is given by:<br /> T1(1) = Entry time in Line 1 + Time spent in station S<sub>1,1</sub><br /> T1(1) = e<sub>1</sub> + a<sub>1,1</sub><br /> Similarly, time taken to leave first station in line 2 is given by:<br /> T2(1) = e<sub>2</sub> + a<sub>2,1</sub></p>
<p><em><strong>Recursive Relations:</strong></em><br /> If we look at the problem statement, it quickly boils down to the below observations:<br /> The car chassis at station S<sub>1,j</sub> can come either from station S<sub>1, j-1</sub> or station S<sub>2, j-1</sub>.</p>
<p>Case #1: Its previous station is S<sub>1, j-1</sub><br /> The minimum time to leave station S<sub>1,j</sub> is given by:<br /> T1(j) = Minimum time taken to leave station S<sub>1, j-1</sub> + Time spent in station S<sub>1, j</sub><br /> T1(j) = T1(j-1) + a<sub>1, j</sub></p>
<p>Case #2: Its previous station is S<sub>2, j-1</sub><br /> The minimum time to leave station S1, j is given by:<br /> T1(j) = Minimum time taken to leave station S<sub>2, j-1</sub> + Extra cost incurred to change the assembly line + Time spent in station S<sub>1, j</sub><br /> T1(j) = T2(j-1) + t<sub>2, j</sub> + a<sub>1, j</sub></p>
<p>The minimum time T1(j) is given by the minimum of the two obtained in cases #1 and #2.<br /> T1(j) = min((T1(j-1) + a<sub>1, j</sub>), (T2(j-1) + t<sub>2, j</sub> + a<sub>1, j</sub>))<br /> Similarly the minimum time to reach station S2, j is given by:<br /> T2(j) = min((T2(j-1) + a<sub>2, j</sub>), (T1(j-1) + t<sub>1, j</sub> + a<sub>2, j</sub>))</p>
<p>The total minimum time taken by the car chassis to come out of the factory is given by:<br /> Tmin = min(Time taken to leave station S<sub>i,n</sub> + Time taken to exit the car factory)<br /> Tmin = min(T1(n) + x<sub>1</sub>, T2(n) + x<sub>2</sub>)</p>
<p><strong>Why dynamic programming?</strong><br /> The above recursion exhibits overlapping sub-problems. There are two ways to reach station S<sub>1, j</sub>:</p>
<ol>
<li>From station S<sub>1, j-1</sub></li>
<li>From station S<sub>2, j-1</sub></li>
</ol>
<p>So, to find the minimum time to leave station S<sub>1, j</sub> the minimum time to leave the previous two stations must be calculated(as explained in above recursion).<br /> Similarly, there are two ways to reach station S<sub>2, j</sub>:</p>
<ol>
<li>From station S<sub>2, j-1</sub></li>
<li>From station S<sub>1, j-1</sub></li>
</ol>
<p>Please note that the minimum times to leave stations S<sub>1, j-1</sub> and S<sub>2, j-1</sub> have already been calculated.</p>
<p>So, we need two tables to store the partial results calculated for each station in an assembly line. The table will be filled in bottom-up fashion.</p>
<p><strong>Note:</strong><br /> In this post, the word “leave” has been used in place of “reach” to avoid the confusion. Since the car chassis must spend a fixed time in each station, the word leave suits better.</p>
<p><strong>Implementation:</strong></p>
<pre><code> 
// A C program to find minimum possible time by the car chassis to complete
#include &lt;stdio.h&gt;
#define NUM_LINE 2
#define NUM_STATION 4

// Utility function to find minimum of two numbers
int min(int a, int b) { return a &lt; b ? a : b; }

int carAssembly(int a[][NUM_STATION], int t[][NUM_STATION], int *e, int *x)
{
    int T1[NUM_STATION], T2[NUM_STATION], i;

    T1[0] = e[0] + a[0][0]; // time taken to leave first station in line 1
    T2[0] = e[1] + a[1][0]; // time taken to leave first station in line 2

    // Fill tables T1[] and T2[] using the above given recursive relations
    for (i = 1; i &lt; NUM_STATION; ++i)
    {
        T1[i] = min(T1[i-1] + a[0][i], T2[i-1] + t[1][i] + a[0][i]);
        T2[i] = min(T2[i-1] + a[1][i], T1[i-1] + t[0][i] + a[1][i]);
    }

    // Consider exit times and retutn minimum
    return min(T1[NUM_STATION-1] + x[0], T2[NUM_STATION-1] + x[1]);
}

int main()
{
    int a[][NUM_STATION] = {{4, 5, 3, 2},
                {2, 10, 1, 4}};
    int t[][NUM_STATION] = {{0, 7, 4, 5},
                {0, 9, 2, 8}};
    int e[] = {10, 12}, x[] = {18, 7};

    printf(&quot;%d&quot;, carAssembly(a, t, e, x));

    return 0;
}
 </code></pre>
<p>Output:</p>
<pre><code> 35 </code></pre>
<p><a href="http://d2hc1qfcrygj4j.cloudfront.net//wp-content/uploads/Figure-2.jpg"><img src="media/file23.jpg" alt="Figure-2" /></a><br /> The bold line shows the path covered by the car chassis for given input values.</p>
<p><strong>Exercise:</strong><br /> Extend the above algorithm to print the path covered by the car chassis in the factory.</p>
<p><strong>References:</strong><br /> <a href="http://www.flipkart.com/introduction-algorithms-3rd/p/itmczynzhyhxv2gs?pid=9788120340077&amp;affid=sandeepgfg">Introduction to Algorithms 3rd Edition by Clifford Stein, Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest</a></p>
<p>This article is compiled by <strong><a href="https://www.facebook.com/barnwal.aashish">Aashish Barnwal</a></strong>. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above</p>
<p><br /></p>
<div id="source-40" class="section level3">
<h3>Source</h3>
<p><a href="http://www.geeksforgeeks.org/dynamic-programming-set-34-assembly-line-scheduling/" class="uri">http://www.geeksforgeeks.org/dynamic-programming-set-34-assembly-line-scheduling/</a></p>
</div>
</div>
</body>
</html>


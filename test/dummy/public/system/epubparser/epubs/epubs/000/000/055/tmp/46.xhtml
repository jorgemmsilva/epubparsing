<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="generator" content="pandoc" />
  <title>Dynamic Programming | Set 36 (Maximum Product Cutting)</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css" />
</head>
<body>
<div id="dynamic-programming-set-36-maximum-product-cutting" class="section level1">
<h1>Dynamic Programming | Set 36 (Maximum Product Cutting)</h1>
<p>Given a rope of length n meters, cut the rope in different parts of integer lengths in a way that maximizes product of lengths of all parts. You must make at least one cut. Assume that the length of rope is more than 2 meters. <span id="more-121922"></span></p>
<p>Examples:</p>
<pre><code> 
Input: n = 2
Output: 1 (Maximum obtainable product is 1*1)

Input: n = 3
Output: 2 (Maximum obtainable product is 1*2)

Input: n = 4
Output: 4 (Maximum obtainable product is 2*2)

Input: n = 5
Output: 6 (Maximum obtainable product is 2*3)

Input: n = 10
Output: 36 (Maximum obtainable product is 3*3*4) </code></pre>
<p><strong>1) Optimal Substructure:</strong><br /> This problem is similar to <a href="http://www.geeksforgeeks.org/dynamic-programming-set-13-cutting-a-rod/">Rod Cutting Problem.</a> We can get the maximum product by making a cut at different positions and comparing the values obtained after a cut. We can recursively call the same function for a piece obtained after a cut.</p>
<p>Let maxProd(n) be the maximum product for a rope of length n. maxProd(n) can be written as following.</p>
<p>maxProd(n) = max(i*(n-i), maxProdRec(n-i)*i) for all i in {1, 2, 3 .. n}</p>
<p><strong>2) Overlapping Subproblems</strong><br /> Following is simple recursive C++ implementation of the problem. The implementation simply follows the recursive structure mentioned above.</p>
<pre><code> 
// A Naive Recursive method to find maxium product
#include &lt;iostream&gt;
using namespace std;

// Utility function to get the maximum of two and three integers
int max(int a, int b) { return (a &gt; b)? a : b;}
int max(int a, int b, int c) { return max(a, max(b, c));}

// The main function that returns maximum product obtainable
// from a rope of length n
int maxProd(int n)
{
    // Base cases
    if (n == 0 || n == 1) return 0;

    // Make a cut at different places and take the maximum of all
    int max_val = 0;
    for (int i = 1; i &lt; n; i++)
      max_val = max(max_val, i*(n-i), maxProd(n-i)*i);

    // Return the maximum of all values
    return max_val;
}

/* Driver program to test above functions */
int main()
{
    cout &lt;&lt; &quot;Maximum Product is &quot; &lt;&lt; maxProd(10);
    return 0;
}
 </code></pre>
<p>Output:</p>
<pre><code> Maximum Product is 36 </code></pre>
<p>Considering the above implementation, following is recursion tree for a Rope of length 5.</p>
<pre><code> 
mP() ---&gt; maxProd() 

                            mP(5)
                 /        /      \     \
                /        /        \      \
            mP(4)       mP(3)     mP(2)   mP(1)
           /  |  \       /  \       |
          /   |   \     /    \      |  
     mP(3) mP(2) mP(1) mP(2) mP(1) mP(1)
    / \       |          |
   /   \      |          |   
 mP(2) mP(1) mP(1)      mP(1) </code></pre>
<p>In the above partial recursion tree, mP(3) is being solved twice. We can see that there are many subproblems which are solved again and again. Since same suproblems are called again, this problem has Overlapping Subprolems property. So the problem has both properties (see <a href="http://www.geeksforgeeks.org/dynamic-programming-set-2-optimal-substructure-property/">this</a>and <a href="http://www.geeksforgeeks.org/dynamic-programming-set-1/">this</a>) of a dynamic programming problem. Like other typical <a href="http://www.geeksforgeeks.org/tag/dynamic-programming/">Dynamic Programming(DP) problems</a>, recomputations of same subproblems can be avoided by constructing a temporary array val[] in bottom up manner.</p>
<pre><code> 
// A Dynamic Programming solution for Max Product Problem
int maxProd(int n)
{
   int val[n+1];
   val[0] = val[1] = 0;
 
   // Build the table val[] in bottom up manner and return
   // the last entry from the table
   for (int i = 1; i &lt;= n; i++)
   {
      int max_val = 0;
      for (int j = 1; j &lt;= i/2; j++)
         max_val = max(max_val, (i-j)*j, j*val[i-j]);
      val[i] = max_val;
   }
   return val[n];
} </code></pre>
<p>Time Complexity of the Dynamic Programming solution is O(n^2) and it requires O(n) extra space.</p>
<p><strong>A Tricky Solution:</strong><br /> If we see some examples of this problems, we can easily observe following pattern.<br /> The maximum product can be obtained be repeatedly cutting parts of size 3 while size is greater than 4, keeping the last part as size of 2 or 3 or 4. For example, n = 10, the maximum product is obtained by 3, 3, 4. For n = 11, the maximum product is obtained by 3, 3, 3, 2. Following is C++ implementation of this approach.</p>
<pre><code> 
#include &lt;iostream&gt;
using namespace std;

/* The main function that teturns the max possible product */
int maxProd(int n)
{
   // n equals to 2 or 3 must be handled explicitly
   if (n == 2 || n == 3) return (n-1);

   // Keep removing parts of size 3 while n is greater than 4
   int res = 1;
   while (n &gt; 4)
   {
       n -= 3;
       res *= 3; // Keep multiplying 3 to res
   }
   return (n * res); // The last part multiplied by previous parts
}

/* Driver program to test above functions */
int main()
{
    cout &lt;&lt; &quot;Maximum Product is &quot; &lt;&lt; maxProd(10);
    return 0;
}
 </code></pre>
<p>Output:</p>
<pre><code> Maximum Product is 36 </code></pre>
<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above</p>
<p><br /></p>
<div id="source-42" class="section level3">
<h3>Source</h3>
<p><a href="http://www.geeksforgeeks.org/dynamic-programming-set-36-cut-a-rope-to-maximize-product/" class="uri">http://www.geeksforgeeks.org/dynamic-programming-set-36-cut-a-rope-to-maximize-product/</a></p>
</div>
</div>
</body>
</html>


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="generator" content="pandoc" />
  <title>Dynamic Programming | Set 9 (Binomial Coefficient)</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css" />
</head>
<body>
<div id="dynamic-programming-set-9-binomial-coefficient" class="section level1">
<h1>Dynamic Programming | Set 9 (Binomial Coefficient)</h1>
<p>Following are common definition of <a href="http://en.wikipedia.org/wiki/Binomial_coefficient">Binomial Coefficients</a>.<br /> 1) A <a href="http://en.wikipedia.org/wiki/Binomial_coefficient">binomial coefficient</a> C(n, k) can be defined as the coefficient of X^k in the expansion of (1 + X)^n. <span id="more-17806"></span></p>
<p>2) A binomial coefficient C(n, k) also gives the number of ways, disregarding order, that k objects can be chosen from among n objects; more formally, the number of k-element subsets (or k-combinations) of an n-element set.</p>
<p><strong>The Problem</strong><br /> <em>Write a function that takes two parameters n and k and returns the value of Binomial Coefficient C(n, k).</em> For example, your function should return 6 for n = 4 and k = 2, and it should return 10 for n = 5 and k = 2.</p>
<p><strong>1) Optimal Substructure</strong><br /> The value of C(n, k) can recursively calculated using following standard formula for Binomial Cofficients.</p>
<pre><code> 
   C(n, k) = C(n-1, k-1) + C(n-1, k)
   C(n, 0) = C(n, n) = 1
 </code></pre>
<p><strong>2) Overlapping Subproblems</strong><br /> Following is simple recursive implementation that simply follows the recursive structure mentioned above.</p>
<pre><code> 
// A Naive Recursive Implementation
#include&lt;stdio.h&gt;

// Returns value of Binomial Coefficient C(n, k)
int binomialCoeff(int n, int k)
{
  // Base Cases
  if (k==0 || k==n)
    return 1;

  // Recur
  return  binomialCoeff(n-1, k-1) + binomialCoeff(n-1, k);
}

/* Drier program to test above function*/
int main()
{
    int n = 5, k = 2;
    printf(&quot;Value of C(%d, %d) is %d &quot;, n, k, binomialCoeff(n, k));
    return 0;
}
 </code></pre>
<p>It should be noted that the above function computes the same subproblems again and again. See the following recursion tree for n = 5 an k = 2. The function C(3, 1) is called two times. For large values of n, there will be many common subproblems.</p>
<pre><code> 
                             C(5, 2)
                    /                      \
           C(4, 1)                           C(4, 2)
            /   \                          /           \
       C(3, 0)   C(3, 1)             C(3, 1)               C(3, 2)
                /    \               /     \               /     \
         C(2, 0)    C(2, 1)      C(2, 0) C(2, 1)          C(2, 1)  C(2, 2)
                   /        \              /   \            /    \
               C(1, 0)  C(1, 1)      C(1, 0)  C(1, 1)   C(1, 0)  C(1, 1)
 </code></pre>
<p>Since same suproblems are called again, this problem has Overlapping Subprolems property. So the Binomial Coefficient problem has both properties (see <a href="http://www.geeksforgeeks.org/archives/12635">this</a>and <a href="http://www.geeksforgeeks.org/archives/12819">this</a>) of a dynamic programming problem. Like other typical <a href="http://www.geeksforgeeks.org/archives/tag/dynamic-programming">Dynamic Programming(DP) problems</a>, recomputations of same subproblems can be avoided by constructing a temporary array C[][] in bottom up manner. Following is Dynamic Programming based implementation.</p>
<pre><code> 
// A Dynamic Programming based solution that uses table C[][] to calculate the 
// Binomial Coefficient 
#include&lt;stdio.h&gt;

// Prototype of a utility function that returns minimum of two integers
int min(int a, int b);

// Returns value of Binomial Coefficient C(n, k)
int binomialCoeff(int n, int k)
{
    int C[n+1][k+1];
    int i, j;

    // Caculate value of Binomial Coefficient in bottom up manner
    for (i = 0; i &lt;= n; i++)
    {
        for (j = 0; j &lt;= min(i, k); j++)
        {
            // Base Cases
            if (j == 0 || j == i)
                C[i][j] = 1;

            // Calculate value using previosly stored values
            else
                C[i][j] = C[i-1][j-1] + C[i-1][j];
        }
    }

    return C[n][k];
}

// A utility function to return minimum of two integers
int min(int a, int b)
{
    return (a&lt;b)? a: b;
}

/* Drier program to test above function*/
int main()
{
    int n = 5, k = 2;
    printf (&quot;Value of C(%d, %d) is %d &quot;, n, k, binomialCoeff(n, k) );
    return 0;
}
 </code></pre>
<p>Time Complexity: O(n*k)<br /> Auxiliary Space: O(n*k)</p>
<p>Following is a space optimized version of the above code. The following code only uses O(k). Thanks to <a href="http://www.geeksforgeeks.org/archives/17806/comment-page-1#comment-7460">AK</a>for suggesting this method.</p>
<pre><code> 
// A space optimized Dynamic Programming Solution
int binomialCoeff(int n, int k)
{
    int* C = (int*)calloc(k+1, sizeof(int));
    int i, j, res;

    C[0] = 1;

    for(i = 1; i &lt;= n; i++)
    {
        for(j = min(i, k); j &gt; 0; j--)
            C[j] = C[j] + C[j-1];
    }

    res = C[k];  // Store the result before freeing memory

    free(C);  // free dynamically allocated memory to avoid memory leak

    return res;
}
 </code></pre>
<p>Time Complexity: O(n*k)<br /> Auxiliary Space: O(k)</p>
<p>References:<br /> <a href="http://www.csl.mtu.edu/cs4321/www/Lectures/Lecture%2015%20-%20Dynamic%20Programming%20Binomial%20Coefficients.htm">http://www.csl.mtu.edu/cs4321/www/Lectures/Lecture%2015%20-%20Dynamic%20Programming%20Binomial%20Coefficients.htm</a></p>
<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>
<p><br /></p>
<div id="source-14" class="section level3">
<h3>Source</h3>
<p><a href="http://www.geeksforgeeks.org/dynamic-programming-set-9-binomial-coefficient/" class="uri">http://www.geeksforgeeks.org/dynamic-programming-set-9-binomial-coefficient/</a></p>
<p><span>Category: <a href="http://www.geeksforgeeks.org/category/c-programs/">Misc</a></span> <span>Tags: <a href="http://www.geeksforgeeks.org/tag/dynamic-programming/">Dynamic Programming</a></span></p>
<p><br /></p>
<p>Post navigation</p>
<p><span class="nav-previous"><a href="http://www.geeksforgeeks.org/check-whether-a-given-string-is-an-interleaving-of-two-other-given-strings/"><span class="meta-nav">←</span> Check whether a given string is an interleaving of two other given strings</a></span> <span class="nav-next"><a href="http://www.geeksforgeeks.org/convert-a-given-tree-to-sum-tree/">Convert a given tree to its Sum Tree <span class="meta-nav">→</span></a></span></p>
<p>Writing code in comment? Please use <a href="http://code.geeksforgeeks.org/">code.geeksforgeeks.org</a>, generate link and share the link here.</p>
</div>
</div>
</body>
</html>


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="generator" content="pandoc" />
  <title>Compute sum of digits in all numbers from 1 to n</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css" />
</head>
<body>
<div id="compute-sum-of-digits-in-all-numbers-from-1-to-n" class="section level1">
<h1>Compute sum of digits in all numbers from 1 to n</h1>
<p>Given a number x, find sum of digits in all numbers from 1 to n.<br /> Examples:<span id="more-134969"></span></p>
<pre><code> 
Input: n = 5
Output: Sum of digits in numbers from 1 to 5 = 15

Input: n = 12
Output: Sum of digits in numbers from 1 to 12 = 51

Input: n = 328
Output: Sum of digits in numbers from 1 to 328 = 3241
 </code></pre>
<p><strong>Naive Solution:</strong><br /> A naive solution is to go through every number x from 1 to n, and compute sum in x by traversing all digits of x. Below is C++ implementation of this idea.</p>
<pre><code> 
// A Simple C++ program to compute sum of digits in numbers from 1 to n
#include&lt;iostream&gt;
using namespace std;

int sumOfDigits(int );

// Returns sum of all digits in numbers from 1 to n
int sumOfDigitsFrom1ToN(int n)
{
    int result = 0; // initialize result

    // One by one compute sum of digits in every number from
    // 1 to n
    for (int x=1; x&lt;=n; x++)
        result += sumOfDigits(x);

    return result;
}

// A utility function to compute sum of digits in a
// given number x
int sumOfDigits(int x)
{
    int sum = 0;
    while (x != 0)
    {
        sum += x %10;
        x   = x /10;
    }
    return sum;
}

// Driver Program
int main()
{
    int n = 328;
    cout &lt;&lt; &quot;Sum of digits in numbers from 1 to &quot; &lt;&lt; n &lt;&lt; &quot; is &quot;
         &lt;&lt; sumOfDigitsFrom1ToN(n);
    return 0;
}
 </code></pre>
<p>Output</p>
<pre><code> Sum of digits in numbers from 1 to 328 is 3241 </code></pre>
<p><br /> <strong>Efficient Solution:</strong><br /> Above is a naive solution. We can do it more efficiently by finding a pattern.</p>
<p>Let us take few examples.</p>
<pre><code> 
sum(9) = 1 + 2 + 3 + 4 ........... + 9
       = 9*10/2 
       = 45

sum(99)  = 45 + (10 + 45) + (20 + 45) + ..... (90 + 45)
         = 45*10 + (10 + 20 + 30 ... 90)
         = 45*10 + 10(1 + 2 + ... 9)
         = 45*10 + 45*10
         = sum(9)*10 + 45*10 

sum(999) = sum(99)*10 + 45*100 </code></pre>
<p>In general, we can compute sum(10<sup>d</sup> – 1) using below formula</p>
<pre><code> 
   sum(10d - 1) = sum(10d-1 - 1) * 10 + 45*(10d-1)  </code></pre>
<p>In below implementation, the above formula is implemented using <a href="http://www.geeksforgeeks.org/tag/dynamic-programming/">dynamic programming</a> as there are overlapping subproblems.<br /> The above formula is one core step of the idea. Below is complete algorithm</p>
<p><strong>Algorithm: sum(n)</strong></p>
<pre><code> 
1) Find number of digits minus one in n. Let this value be &#39;d&#39;.  
   For 328, d is 2.

2) Compute some of digits in numbers from 1 to 10d - 1.  
   Let this sum be w. For 328, we compute sum of digits from 1 to 
   99 using above formula.

3) Find Most significant digit (msd) in n. For 328, msd is 3.

4) Overall sum is sum of following terms

    a) Sum of digits in 1 to &quot;msd * 10d - 1&quot;.  For 328, sum of 
       digits in numbers from 1 to 299.
        For 328, we compute 3*sum(99) + (1 + 2)*100.  Note that sum of
        sum(299) is sum(99) + sum of digits from 100 to 199 + sum of digits
        from 200 to 299.  
        Sum of 100 to 199 is sum(99) + 1*100 and sum of 299 is sum(99) + 2*100.
        In general, this sum can be computed as w*msd + (msd*(msd-1)/2)*10d

    b) Sum of digits in msd * 10d to n.  For 328, sum of digits in 
       300 to 328.
        For 328, this sum is computed as 3*29 + recursive call &quot;sum(28)&quot;
        In general, this sum can be computed as  msd * (n % (msd*10d) + 1) 
        + sum(n % (10d)) </code></pre>
<p>Below is C++ implementation of above aglorithm.</p>
<pre><code> 
// C++ program to compute sum of digits in numbers from 1 to n
#include&lt;bits/stdc++.h&gt;
using namespace std;

// Function to computer sum of digits in numbers from 1 to n
// Comments use example of 328 to explain the code
int sumOfDigitsFrom1ToN(int n)
{
    // base case: if n&lt;10 return sum of
    // first n natural numbers
    if (n&lt;10)
      return n*(n+1)/2;

    // d = number of digits minus one in n. For 328, d is 2
    int d = log10(n);

    // computing sum of digits from 1 to 10^d-1,
    // d=1 a[0]=0;
    // d=2 a[1]=sum of digit from 1 to 9 = 45
    // d=3 a[2]=sum of digit from 1 to 99 = a[1]*10 + 45*10^1 = 900
    // d=4 a[3]=sum of digit from 1 to 999 = a[2]*10 + 45*10^2 = 13500
    int *a = new int[d+1];
    a[0] = 0, a[1] = 45;
    for (int i=2; i&lt;=d; i++)
        a[i] = a[i-1]*10 + 45*ceil(pow(10,i-1));

    // computing 10^d
    int p = ceil(pow(10, d));

    // Most significant digit (msd) of n,
    // For 328, msd is 3 which can be obtained using 328/100
    int msd = n/p;

    // EXPLANATION FOR FIRST and SECOND TERMS IN BELOW LINE OF CODE
    // First two terms compute sum of digits from 1 to 299
    // (sum of digits in range 1-99 stored in a[d]) +
    // (sum of digits in range 100-199, can be calculated as 1*100 + a[d]
    // (sum of digits in range 200-299, can be calculated as 2*100 + a[d]
    //  The above sum can be written as 3*a[d] + (1+2)*100

    // EXPLANATION FOR THIRD AND FOURTH TERMS IN BELOW LINE OF CODE
    // The last two terms compute sum of digits in number from 300 to 328
    // The third term adds 3*29 to sum as digit 3 occurs in all numbers 
    //                from 300 to 328
    // The fourth term recursively calls for 28
    return msd*a[d] + (msd*(msd-1)/2)*p +  
           msd*(1+n%p) + sumOfDigitsFrom1ToN(n%p);
}

// Driver Program
int main()
{
    int n = 328;
    cout &lt;&lt; &quot;Sum of digits in numbers from 1 to &quot; &lt;&lt; n &lt;&lt; &quot; is &quot;
         &lt;&lt; sumOfDigitsFrom1ToN(n);
    return 0;
}
 </code></pre>
<p>Output</p>
<pre><code> Sum of digits in numbers from 1 to 328 is 3241 </code></pre>
<p>The efficient algorithm has one more advantage that we need to compute the array ‘a[]’ only once even when we are given multiple inputs.</p>
<p>This article is computed by <strong>Shubham Gupta</strong>. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above</p>
<p><br /></p>
<div id="source-61" class="section level3">
<h3>Source</h3>
<p><a href="http://www.geeksforgeeks.org/count-sum-of-digits-in-numbers-from-1-to-n/" class="uri">http://www.geeksforgeeks.org/count-sum-of-digits-in-numbers-from-1-to-n/</a></p>
<p><span>Category: <a href="http://www.geeksforgeeks.org/category/c-programs/">Misc</a></span> <span>Tags: <a href="http://www.geeksforgeeks.org/tag/dynamic-programming/">Dynamic Programming</a>, <a href="http://www.geeksforgeeks.org/tag/mathematicalalgo/">MathematicalAlgo</a></span></p>
</div>
</div>
</body>
</html>


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="generator" content="pandoc" />
  <title>Find minimum number of coins that make a given value</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css" />
</head>
<body>
<div id="find-minimum-number-of-coins-that-make-a-given-value" class="section level1">
<h1>Find minimum number of coins that make a given value</h1>
<p>Given a value V, if we want to make change for V cents, and we have infinite supply of each of C = { C1, C2, .. , Cm} valued coins, what is the minimum number of coins to make the change? <span id="more-135212"></span></p>
<p>Examples:</p>
<pre><code> 
Input: coins[] = {25, 10, 5}, V = 30
Output: Minimum 2 coins required
We can use one coin of 25 cents and one of 5 cents 

Input: coins[] = {9, 6, 5, 1}, V = 11
Output: Minimum 2 coins required
We can use one coin of 6 cents and 1 coin of 5 cents
 </code></pre>
<p><strong>We strongly recommend you to minimize your browser and try this yourself first.</strong></p>
<p>This problem is a variation of the problem discussed <a href="http://www.geeksforgeeks.org/dynamic-programming-set-7-coin-change/">Coin Change Problem</a>. Here instead of finding total number of possible solutions, we need to find the solution with minimum number of coins.</p>
<p>The minimum number of coins for a value V can be computed using below recursive formula.</p>
<pre><code> 
If V == 0, then 0 coins required.
If V &gt; 0
   minCoin(coins[0..m-1], V) = min {1 + minCoins(V-coin[i])} 
                               where i varies from 0 to m-1 
                               and coin[i] 
Below is recursive solution based on above recursive formula.
 
// A Naive recursive C++ program to find minimum of coins
// to make a given change V
#include&lt;bits/stdc++.h&gt;
using namespace std;

// m is size of coins array (number of different coins)
int minCoins(int coins[], int m, int V)
{
   // base case
   if (V == 0) return 0;

   // Initialize result
   int res = INT_MAX;

   // Try every coin that has smaller value than V
   for (int i=0; i&lt;m; i++)
   {
     if (coins[i] &lt;= V)
     {
         int sub_res = minCoins(coins, m, V-coins[i]);

         // Check for INT_MAX to avoid overflow and see if
         // result can minimized
         if (sub_res != INT_MAX &amp;&amp; sub_res + 1 &lt; res)
            res = sub_res + 1;
     }
   }
   return res;
}

// Driver program to test above function
int main()
{
    int coins[] =  {9, 6, 5, 1};
    int m = sizeof(coins)/sizeof(coins[0]);
    int V = 11;
    cout &lt;&lt; &quot;Minimum coins required is &quot;
         &lt;&lt; minCoins(coins, m, V);
    return 0;
}
 </code></pre>
<p>Output:</p>
<pre><code> Minimum coins required is 2 </code></pre>
<p>The time complexity of above solution is exponential. If we draw the complete recursion tree, we can observer that many subproblems are solved again and again. For example, when we start from V = 11, we can reach 6 by subtracting one 5 times and by subtracting 5 one times. So the subproblem for 6 is called twice.<br /> Since same suproblems are called again, this problem has Overlapping Subprolems property. So the min coins problem has both properties (see <a href="http://www.geeksforgeeks.org/archives/12635">this</a>and <a href="http://www.geeksforgeeks.org/archives/12819">this</a>) of a dynamic programming problem. Like other typical <a href="http://www.geeksforgeeks.org/archives/tag/dynamic-programming">Dynamic Programming(DP) problems</a>, recomputations of same subproblems can be avoided by constructing a temporary array table[][] in bottom up manner. Below is Dynamic Programming based solution.</p>
<pre><code> 
// A Dynamic Programming based C++ program to find minimum of coins
// to make a given change V
#include&lt;bits/stdc++.h&gt;
using namespace std;

// m is size of coins array (number of different coins)
int minCoins(int coins[], int m, int V)
{
    // table[i] will be storing the minimum number of coins
    // required for i value.  So table[V] will have result
    int table[V+1];

    // Base case (If given value V is 0)
    table[0] = 0;

    // Initialize all table values as Infinite
    for (int i=1; i&lt;=V; i++)
        table[i] = INT_MAX;

    // Compute minimum coins required for all
    // values from 1 to V
    for (int i=1; i&lt;=V; i++)
    {
        // Go through all coins smaller than i
        for (int j=0; j&lt;m; j++)
          if (coins[j] &lt;= i)
          {
              int sub_res = table[i-coins[j]];
              if (sub_res != INT_MAX &amp;&amp; sub_res + 1 &lt; table[i])
                  table[i] = sub_res + 1;
          }
    }
    return table[V];
}

// Driver program to test above function
int main()
{
    int coins[] =  {9, 6, 5, 1};
    int m = sizeof(coins)/sizeof(coins[0]);
    int V = 11;
    cout &lt;&lt; &quot;Minimum coins required is &quot;
         &lt;&lt; minCoins(coins, m, V);
    return 0;
}
 </code></pre>
<p>Output:</p>
<pre><code> Minimum coins required is 2 </code></pre>
<p>Time complexity of the above solution is O(mV).</p>
<p>Thanks to Goku for suggesting above solution in a comment <a href="http://www.geeksforgeeks.org/dynamic-programming-set-7-coin-change/">here</a> and thanks to Vignesh Mohan for suggesting this problem and initial solution.</p>
<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above</p>
<p><br /></p>
<div id="source-64" class="section level3">
<h3>Source</h3>
<p><a href="http://www.geeksforgeeks.org/find-minimum-number-of-coins-that-make-a-change/" class="uri">http://www.geeksforgeeks.org/find-minimum-number-of-coins-that-make-a-change/</a></p>
<p><span>Category: <a href="http://www.geeksforgeeks.org/category/c-arrays/">Arrays</a></span> <span>Tags: <a href="http://www.geeksforgeeks.org/tag/dynamic-programming/">Dynamic Programming</a></span></p>
<p><br /></p>
<p>Post navigation</p>
<p><span class="nav-previous"><a href="http://www.geeksforgeeks.org/drishti-soft-solutions-interview-set-2-on-campus-written/"><span class="meta-nav">←</span> Drishti-Soft Solutions Interview | Set 2 (On-Campus Written)</a></span> <span class="nav-next"><a href="http://www.geeksforgeeks.org/adobe-interview-experience-set-23-1-year-experienced/">Adobe Interview Experience | Set 23 (1 Year Experienced) <span class="meta-nav">→</span></a></span></p>
<p>Writing code in comment? Please use <a href="http://code.geeksforgeeks.org/">code.geeksforgeeks.org</a>, generate link and share the link here.</p>
</div>
</div>
</body>
</html>


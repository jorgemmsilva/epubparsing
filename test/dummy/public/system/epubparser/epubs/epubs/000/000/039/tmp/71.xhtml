<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="generator" content="pandoc" />
  <title>Find length of the longest consecutive path from a given starting character</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css" />
</head>
<body>
<div id="find-length-of-the-longest-consecutive-path-from-a-given-starting-character" class="section level1">
<h1>Find length of the longest consecutive path from a given starting character</h1>
<p>Given a matrix of characters. Find length of the longest path from a given character, such that all characters in the path are consecutive to each other, i.e., every character in path is next to previous in alphabetical order.<span id="more-135270"></span> It is allowed to move in all 8 directions from a cell.</p>
<p><a href="http://d2hc1qfcrygj4j.cloudfront.net//wp-content/uploads/matrix.png"><img src="media/file38.png" alt="matrix" /></a></p>
<p>Example</p>
<pre><code> 
Input: mat[][] = { {a, c, d},
                   {h, b, e},
                   {i, g, f}}
      Starting Point = &#39;e&#39;

Output: 5
If starting point is &#39;e&#39;, then longest path with consecutive 
characters is &quot;e f g h i&quot;.

Input: mat[R][C] = { {b, e, f},
                     {h, d, a},
                     {i, c, a}};
      Starting Point = &#39;b&#39;

Output: 1
&#39;c&#39; is not present in all adjacent cells of &#39;b&#39;
  </code></pre>
<p><strong>We strongly recommend you to minimize your browser and try this yourself first.</strong></p>
<p>The idea is to first search given starting character in the given matrix. Do Depth First Search (DFS) from all occurrences to find all consecutive paths. While doing DFS, we may encounter many subproblems again and again. So we use dynamic programming to store results of subproblems.</p>
<p>Below is C++ implementation of above idea.</p>
<pre><code> 
// C++ program to find the longest consecutive path
#include&lt;bits/stdc++.h&gt;
#define R 3
#define C 3
using namespace std;

// tool matrices to recur for adjacent cells.
int x[] = {0, 1, 1, -1, 1, 0, -1, -1};
int y[] = {1, 0, 1, 1, -1, -1, 0, -1};

// dp[i][j] Stores length of longest consecutive path
// starting at arr[i][j].
int dp[R][C];

// check whether mat[i][j] is a valid cell or not.
bool isvalid(int i, int j)
{
    if (i &lt; 0 || j &lt; 0 || i &gt;= R || j &gt;= C)
      return false;
    return true;
}

// Check whether current character is adjacent to previous
// character (character processed in parent call) or not.
bool isadjacent(char prev, char curr)
{
    return ((curr - prev) == 1);
}

// i, j are the indices of the current cell and prev is the
// character processed in the parent call.. also mat[i][j]
// is our current character.
int getLenUtil(char mat[R][C], int i, int j, char prev)
{
     // If this cell is not valid or current character is not
     // adjacent to previous one (e.g. d is not adjacent to b )
     // or if this cell is already included in the path than return 0.
    if (!isvalid(i, j) || !isadjacent(prev, mat[i][j]))
         return 0;

    // If this subproblem is already solved , return the answer
    if (dp[i][j] != -1)
        return dp[i][j];

    int ans = 0;  // Initialize answer

    // recur for paths with differnt adjacent cells and store
    // the length of longest path.
    for (int k=0; k&lt;8; k++)
      ans = max(ans, 1 + getLenUtil(mat, i + x[k],
                                   j + y[k], mat[i][j]));

    // save the answer and return
    return dp[i][j] = ans;
}

// Returns length of the longest path with all characters consecutive
// to each other.  This function first initializes dp array that
// is used to store results of subproblems, then it calls
// recursive DFS based function getLenUtil() to find max length path
int getLen(char mat[R][C], char s)
{
    memset(dp, -1, sizeof dp);
    int ans = 0;

    for (int i=0; i&lt;R; i++)
    {
        for (int j=0; j&lt;C; j++)
        {
            // check for each possible starting point
            if (mat[i][j] == s) {

                // recur for all eight adjacent cells
                for (int k=0; k&lt;8; k++)
                  ans = max(ans, 1 + getLenUtil(mat,
                                    i + x[k], j + y[k], s));
            }
        }
    }
    return ans;
}

// Driver program
int main() {

    char mat[R][C] = { {&#39;a&#39;,&#39;c&#39;,&#39;d&#39;},
                     { &#39;h&#39;,&#39;b&#39;,&#39;a&#39;},
                     { &#39;i&#39;,&#39;g&#39;,&#39;f&#39;}};

    cout &lt;&lt; getLen(mat, &#39;a&#39;) &lt;&lt; endl;
    cout &lt;&lt; getLen(mat, &#39;e&#39;) &lt;&lt; endl;
    cout &lt;&lt; getLen(mat, &#39;b&#39;) &lt;&lt; endl;
    cout &lt;&lt; getLen(mat, &#39;f&#39;) &lt;&lt; endl;
    return 0;
}
 </code></pre>
<p>Output:</p>
<pre><code> 4
0
3
4 </code></pre>
<p>Thanks to <a href="http://qa.geeksforgeeks.org/user/Mr.Lazy">Gaurav Ahirwar</a> for above solution.</p>
<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above</p>
<p><br /></p>
<div id="source-67" class="section level3">
<h3>Source</h3>
<p><a href="http://www.geeksforgeeks.org/find-length-of-the-longest-consecutive-path-in-a-character-matrix/" class="uri">http://www.geeksforgeeks.org/find-length-of-the-longest-consecutive-path-in-a-character-matrix/</a></p>
<p><span>Category: <a href="http://www.geeksforgeeks.org/category/c-arrays/">Arrays</a></span> <span>Tags: <a href="http://www.geeksforgeeks.org/tag/dynamic-programming/">Dynamic Programming</a>, <a href="http://www.geeksforgeeks.org/tag/matrix/">Matrix</a></span></p>
<p><br /></p>
<p>Post navigation</p>
<p><span class="nav-previous"><a href="http://www.geeksforgeeks.org/fiberlink-maas360-interview-experience-set-4-off-campus/"><span class="meta-nav">←</span> Fiberlink (maas360) Interview Experience | Set 4 (Off-Campus)</a></span> <span class="nav-next"><a href="http://www.geeksforgeeks.org/goldman-sachs-interview-experience-set-10-on-campus/">Goldman Sachs Interview Experience | Set 10 (On-Campus) <span class="meta-nav">→</span></a></span></p>
<p>Writing code in comment? Please use <a href="http://code.geeksforgeeks.org/">code.geeksforgeeks.org</a>, generate link and share the link here.</p>
</div>
</div>
</body>
</html>


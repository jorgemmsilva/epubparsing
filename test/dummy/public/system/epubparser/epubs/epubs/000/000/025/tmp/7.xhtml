<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="generator" content="pandoc" />
  <title>Maximum size square sub-matrix with all 1s</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css" />
</head>
<body>
<div id="maximum-size-square-sub-matrix-with-all-1s" class="section level1">
<h1>Maximum size square sub-matrix with all 1s</h1>
<p>Given a binary matrix, find out the maximum size square sub-matrix with all 1s.</p>
<p>For example, consider the below binary matrix. <span id="more-6257"></span></p>
<pre><code>  
   0  1  1  0  1 
   1  1  0  1  0 
   0  1  1  1  0
   1  1  1  1  0
   1  1  1  1  1
   0  0  0  0  0 </code></pre>
<p>The maximum square sub-matrix with all set bits is</p>
<pre><code> 
    1  1  1
    1  1  1
    1  1  1 </code></pre>
<p>Algorithm:<br /> Let the given binary matrix be M[R][C]. The idea of the algorithm is to construct an auxiliary size matrix S[][] in which each entry S[i][j] represents size of the square sub-matrix with all 1s including M[i][j] where M[i][j] is the rightmost and bottommost entry in sub-matrix.</p>
<pre><code> 
1) Construct a sum matrix S[R][C] for the given M[R][C].
     a) Copy first row and first columns as it is from M[][] to S[][]
     b) For other entries, use following expressions to construct S[][]
         If M[i][j] is 1 then
            S[i][j] = min(S[i][j-1], S[i-1][j], S[i-1][j-1]) + 1
         Else /*If M[i][j] is 0*/
            S[i][j] = 0
2) Find the maximum entry in S[R][C]
3) Using the value and coordinates of maximum entry in S[i], print 
   sub-matrix of M[][] </code></pre>
<p>For the given M[R][C] in above example, constructed S[R][C] would be:</p>
<pre><code> 
   0  1  1  0  1
   1  1  0  1  0
   0  1  1  1  0
   1  1  2  2  0
   1  2  2  3  1
   0  0  0  0  0 </code></pre>
<p>The value of maximum entry in above matrix is 3 and coordinates of the entry are (4, 3). Using the maximum value and its coordinates, we can find out the required sub-matrix.</p>
<pre><code> 
#include&lt;stdio.h&gt;
#define bool int
#define R 6
#define C 5

void printMaxSubSquare(bool M[R][C])
{
  int i,j;
  int S[R][C];
  int max_of_s, max_i, max_j; 
 
  /* Set first column of S[][]*/
  for(i = 0; i &lt; R; i++)
     S[i][0] = M[i][0];
 
  /* Set first row of S[][]*/     
  for(j = 0; j &lt; C; j++)
     S[0][j] = M[0][j];
     
  /* Construct other entries of S[][]*/
  for(i = 1; i &lt; R; i++)
  {
    for(j = 1; j &lt; C; j++)
    {
      if(M[i][j] == 1) 
        S[i][j] = min(S[i][j-1], S[i-1][j], S[i-1][j-1]) + 1;
      else
        S[i][j] = 0;
    }    
  } 
  
  /* Find the maximum entry, and indexes of maximum entry 
     in S[][] */
  max_of_s = S[0][0]; max_i = 0; max_j = 0;
  for(i = 0; i &lt; R; i++)
  {
    for(j = 0; j &lt; C; j++)
    {
      if(max_of_s &lt; S[i][j])
      {
         max_of_s = S[i][j];
         max_i = i; 
         max_j = j;
      }        
    }                 
  }     
  
  printf(&quot;\n Maximum size sub-matrix is: \n&quot;);
  for(i = max_i; i &gt; max_i - max_of_s; i--)
  {
    for(j = max_j; j &gt; max_j - max_of_s; j--)
    {
      printf(&quot;%d &quot;, M[i][j]);
    }  
    printf(&quot;\n&quot;);
  }  
}     

/* UTILITY FUNCTIONS */
/* Function to get minimum of three values */
int min(int a, int b, int c)
{
  int m = a;
  if (m &gt; b) 
    m = b;
  if (m &gt; c) 
    m = c;
  return m;
}

/* Driver function to test above functions */
int main()
{
  bool M[R][C] =  {{0, 1, 1, 0, 1}, 
                   {1, 1, 0, 1, 0}, 
                   {0, 1, 1, 1, 0},
                   {1, 1, 1, 1, 0},
                   {1, 1, 1, 1, 1},
                   {0, 0, 0, 0, 0}};
               
  printMaxSubSquare(M);
  getchar();  
}  
 </code></pre>
<p>Time Complexity: O(m*n) where m is number of rows and n is number of columns in the given matrix.<br /> Auxiliary Space: O(m*n) where m is number of rows and n is number of columns in the given matrix.<br /> Algorithmic Paradigm: Dynamic Programming</p>
<p>Please write comments if you find any bug in above code/algorithm, or find other ways to solve the same problem</p>
<p><br /></p>
<div id="source-2" class="section level3">
<h3>Source</h3>
<p><a href="http://www.geeksforgeeks.org/maximum-size-sub-matrix-with-all-1s-in-a-binary-matrix/" class="uri">http://www.geeksforgeeks.org/maximum-size-sub-matrix-with-all-1s-in-a-binary-matrix/</a></p>
<p><span>Category: <a href="http://www.geeksforgeeks.org/category/c-arrays/">Arrays</a></span> <span>Tags: <a href="http://www.geeksforgeeks.org/tag/dynamic-programming/">Dynamic Programming</a></span></p>
<p><br /></p>
<p>Post navigation</p>
<p><span class="nav-previous"><a href="http://www.geeksforgeeks.org/print-list-items-containing-all-characters-of-a-given-word/"><span class="meta-nav">←</span> Print list items containing all characters of a given word</a></span> <span class="nav-next"><a href="http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion/">Inorder Tree Traversal without Recursion <span class="meta-nav">→</span></a></span></p>
<p>Writing code in comment? Please use <a href="http://code.geeksforgeeks.org/">code.geeksforgeeks.org</a>, generate link and share the link here.</p>
</div>
</div>
</body>
</html>


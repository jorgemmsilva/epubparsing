<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="generator" content="pandoc" />
  <title>Longest Even Length Substring such that Sum of First and Second Half is same</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css" />
</head>
<body>
<div id="longest-even-length-substring-such-that-sum-of-first-and-second-half-is-same" class="section level1">
<h1>Longest Even Length Substring such that Sum of First and Second Half is same</h1>
<p>Given a string ‘str’ of digits, find length of the longest substring of ‘str’, such that the length of the substring is 2k digits and sum of left k digits is equal to the sum of right k digits. <span id="more-133264"></span></p>
<p>Examples:</p>
<pre><code> 
Input: str = &quot;123123&quot;
Output: 6
The complete string is of even length and sum of first and second
half digits is same

Input: str = &quot;1538023&quot;
Output: 4
The longest substring with same first and second half sum is &quot;5380&quot;
 </code></pre>
<p><strong>Simple Solution [ O(n<sup>3</sup>) ]</strong><br /> A Simple Solution is to check every substring of even length. The following is C based implementation of simple approach.</p>
<pre><code> 
// A simple C based program to find length of longest  even length
// substring with same sum of digits in left and right 
#include&lt;stdio.h&gt;
#include&lt;string.h&gt;

int findLength(char *str)
{
    int n = strlen(str);
    int maxlen =0;  // Initialize result

    // Choose starting point of every substring
    for (int i=0; i&lt;n; i++)
    {
        // Choose ending point of even length substring
        for (int j =i+1; j&lt;n; j += 2)
        {
            int length = j-i+1;//Find length of current substr

            // Calculate left &amp; right sums for current substr
            int leftsum = 0, rightsum =0;
            for (int k =0; k&lt;length/2; k++)
            {
                leftsum  += (str[i+k]-&#39;0&#39;);
                rightsum += (str[i+k+length/2]-&#39;0&#39;);
            }

            // Update result if needed
            if (leftsum == rightsum &amp;&amp; maxlen &lt; length)
                    maxlen = length;
        }
    }
    return maxlen;
}

// Driver program to test above function
int main(void)
{
    char str[] = &quot;1538023&quot;;
    printf(&quot;Length of the substring is %d&quot;, findLength(str));
    return 0;
}
 </code></pre>
<p>Output:</p>
<pre><code> Length of the substring is 4 </code></pre>
<p><br /> <strong>Dynamic Programming [ O(n<sup>2</sup>) and O(n<sup>2</sup>) extra space]</strong><br /> The above solution can be optimized to work in O(n<sup>2</sup>) using <strong>Dynamic Programming</strong>. The idea is to build a 2D table that stores sums of substrings. The following is C based implementation of Dynamic Programming approach.</p>
<pre><code> 
// A C based program that uses Dynamic Programming to find length of the
// longest even substring with same sum of digits in left and right half
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int findLength(char *str)
{
    int n = strlen(str);
    int maxlen = 0; // Initialize result

    // A 2D table where sum[i][j] stores sum of digits
    // from str[i] to str[j].  Only filled entries are
    // the entries where j &gt;= i
    int sum[n][n];

    // Fill the diagonal values for sunstrings of length 1
    for (int i =0; i&lt;n; i++)
        sum[i][i] = str[i]-&#39;0&#39;;

    // Fill entries for substrings of length 2 to n
    for (int len=2; len&lt;=n; len++)
    {
        // Pick i and j for current substring
        for (int i=0; i&lt;n-len+1; i++)
        {
            int j = i+len-1;
            int k = len/2;

            // Calculate value of sum[i][j]
            sum[i][j] = sum[i][j-k] + sum[j-k+1][j];

            // Update result if &#39;len&#39; is even, left and right
            // sums are same and len is more than maxlen
            if (len%2 == 0 &amp;&amp; sum[i][j-k] == sum[(j-k+1)][j]
                           &amp;&amp; len &gt; maxlen)
                 maxlen = len;
        }
    }
    return maxlen;
}

// Driver program to test above function
int main(void)
{
    char str[] = &quot;153803&quot;;
    printf(&quot;Length of the substring is %d&quot;, findLength(str));
    return 0;
} </code></pre>
<p>Output:</p>
<pre><code> Length of the substring is 4 </code></pre>
<p>Time complexity of the above solution is O(n<sup>2</sup>), but it requires O(n<sup>2</sup>) extra space.</p>
<p><br /> <strong>[A O(n<sup>2</sup>) and O(n) extra space solution]</strong><br /> The idea is to use a single dimensional array to store cumulative sum.</p>
<pre><code> 
// A O(n^2) time and O(n) extra space solution
#include&lt;bits/stdc++.h&gt;
using namespace std;

int findLength(string str, int n)
{
    int sum[n+1]; // To store cumulative sum from first digit to nth digit
    sum[0] = 0;

    /* Store cumulative sum of digits from first to last digit */
    for (int i = 1; i &lt;= n; i++)
        sum[i] = (sum[i-1] + str[i-1]  - &#39;0&#39;); /* convert chars to int */

    int ans = 0; // initialize result

    /* consider all even length substrings one by one */
    for (int len = 2; len &lt;= n; len += 2)
    {
        for (int i = 0; i &lt;= n-len; i++)
        {
            int j = i + len - 1;

            /* Sum of first and second half is same than update ans */
            if (sum[i+len/2] - sum[i] == sum[i+len] - sum[i+len/2])
                ans = max(ans, len);
        }
    }
    return ans;
}

// Driver program to test above function
int main()
{
    string str = &quot;123123&quot;;
    cout &lt;&lt; &quot;Length of the substring is &quot; &lt;&lt; findLength(str, str.length());
    return 0;
}
 </code></pre>
<p>Output:</p>
<pre><code> Length of the substring is 6 </code></pre>
<p>Thanks to Gaurav Ahirwar for suggesting this method.</p>
<p><br /> <strong>[A O(n<sup>2</sup>) time and O(1) extra space solution]</strong><br /> The idea is to consider all possible mid points (of even length substrings) and keep expanding on both sides to get and update optimal length as the sum of two sides become equal.</p>
<p>Below is C++ implementation of the above idea.</p>
<pre><code> 
// A O(n^2) time and O(1) extra space solution
#include&lt;bits/stdc++.h&gt;
using namespace std;

int findLength(string str, int n)
{
    int ans = 0; // Initialize result

    // Consider all possible midpoints one by one
    for (int i = 0; i &lt;= n-2; i++)
    {
        /* For current midpoint &#39;i&#39;, keep expanding substring on
           both sides, if sum of both sides becomes equal update
           ans */
        int l = i, r = i + 1;

        /* initialize left and right sum */
        int lsum = 0, rsum = 0;

        /* move on both sides till indexes go out of bounds */
        while (r &lt; n &amp;&amp; l &gt;= 0)
        {
            lsum += str[l] - &#39;0&#39;;
            rsum += str[r] - &#39;0&#39;;
            if (lsum == rsum)
                ans = max(ans, r-l+1);
            l--;
            r++;
        }
    }
    return ans;
}

// Driver program to test above function
int main()
{
    string str = &quot;123123&quot;;
    cout &lt;&lt; &quot;Length of the substring is &quot; &lt;&lt; findLength(str, str.length());
    return 0;
}
 </code></pre>
<p>Output:</p>
<pre><code> Length of the substring is 6 </code></pre>
<p>Thanks to Gaurav Ahirwar for suggesting this method.</p>
<p>This article is contributed by <strong>Ashish Bansal</strong>. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above</p>
<p><br /></p>
<div id="source-53" class="section level3">
<h3>Source</h3>
<p><a href="http://www.geeksforgeeks.org/longest-even-length-substring-sum-first-second-half/" class="uri">http://www.geeksforgeeks.org/longest-even-length-substring-sum-first-second-half/</a></p>
<p><span>Category: <a href="http://www.geeksforgeeks.org/category/c-strings/">Strings</a></span> <span>Tags: <a href="http://www.geeksforgeeks.org/tag/dynamic-programming/">Dynamic Programming</a></span></p>
</div>
</div>
</body>
</html>


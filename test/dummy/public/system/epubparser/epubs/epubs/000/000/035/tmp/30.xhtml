<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="generator" content="pandoc" />
  <title>Dynamic Programming | Set 20 (Maximum Length Chain of Pairs)</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css" />
</head>
<body>
<div id="dynamic-programming-set-20-maximum-length-chain-of-pairs" class="section level1">
<h1>Dynamic Programming | Set 20 (Maximum Length Chain of Pairs)</h1>
<p>You are given n pairs of numbers. In every pair, the first number is always smaller than the second number. <span id="more-23245"></span>A pair (c, d) can follow another pair (a, b) if b Amazon Interview | Set 2</p>
<p>For example, if the given pairs are {{5, 24}, {39, 60}, {15, 28}, {27, 40}, {50, 90} }, then the longest chain that can be formed is of length 3, and the chain is {{5, 24}, {27, 40}, {50, 90}}</p>
<p>This problem is a variation of standard <a href="http://www.geeksforgeeks.org/archives/12832">Longest Increasing Subsequence</a> problem. Following is a simple two step process.<br /> 1) Sort given pairs in increasing order of first (or smaller) element.<br /> 2) Now run a modified LIS process where we compare the second element of already finalized LIS with the first element of new LIS being constructed.</p>
<p>The following code is a slight modification of method 2 of <a href="http://www.geeksforgeeks.org/archives/12832">this post</a>.</p>
<pre><code> 
#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;

// Structure for a pair
struct pair
{
  int a;
  int b;
};

// This function assumes that arr[] is sorted in increasing order
// according the first (or smaller) values in pairs.
int maxChainLength( struct pair arr[], int n)
{
   int i, j, max = 0;
   int *mcl = (int*) malloc ( sizeof( int ) * n );

   /* Initialize MCL (max chain length) values for all indexes */
   for ( i = 0; i &lt; n; i++ )
      mcl[i] = 1;

   /* Compute optimized chain length values in bottom up manner */
   for ( i = 1; i &lt; n; i++ )
      for ( j = 0; j &lt; i; j++ )
         if ( arr[i].a &gt; arr[j].b &amp;&amp; mcl[i] &lt; mcl[j] + 1)
            mcl[i] = mcl[j] + 1;

   // mcl[i] now stores the maximum chain length ending with pair i

   /* Pick maximum of all MCL values */
   for ( i = 0; i &lt; n; i++ )
      if ( max &lt; mcl[i] )
         max = mcl[i];

   /* Free memory to avoid memory leak */
   free( mcl );

   return max;
}


/* Driver program to test above function */
int main()
{
    struct pair arr[] = { {5, 24}, {15, 25},
                          {27, 40}, {50, 60} };
    int n = sizeof(arr)/sizeof(arr[0]);
    printf(&quot;Length of maximum size chain is %d\n&quot;,
           maxChainLength( arr, n ));
    return 0;
}
 </code></pre>
<p>Output:</p>
<pre><code> Length of maximum size chain is 3 </code></pre>
<p>Time Complexity: O(n^2) where n is the number of pairs.</p>
<p>The given problem is also a variation of <a href="http://www.geeksforgeeks.org/archives/18528">Activity Selection problem</a>and can be solved in (nLogn) time. To solve it as a activity selection problem, consider the first element of a pair as start time in activity selection problem, and the second element of pair as end time. Thanks to Palash for suggesting this approach.</p>
<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>
<p><br /></p>
<div id="source-25" class="section level3">
<h3>Source</h3>
<p><a href="http://www.geeksforgeeks.org/dynamic-programming-set-20-maximum-length-chain-of-pairs/" class="uri">http://www.geeksforgeeks.org/dynamic-programming-set-20-maximum-length-chain-of-pairs/</a></p>
</div>
</div>
</body>
</html>


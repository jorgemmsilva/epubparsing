<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="generator" content="pandoc" />
  <title>Dynamic Programming | Set 29 (Longest Common Substring)</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css" />
</head>
<body>
<div id="dynamic-programming-set-29-longest-common-substring" class="section level1">
<h1>Dynamic Programming | Set 29 (Longest Common Substring)</h1>
<p>Given two strings ‘X’ and ‘Y’, find the length of the longest common substring. For example, if the given strings are “GeeksforGeeks” and “GeeksQuiz”, the output should be 5 as longest common substring is “Geeks”<span id="more-117494"></span></p>
<p>Let m and n be the lengths of first and second strings respectively.</p>
<p>A <strong>simple solution</strong> is to one by one consider all substrings of first string and for every substring check if it is a substring in second string. Keep track of the maximum length substring. There will be O(m^2) substrings and we can find whether a string is subsring on another string in O(n) time (See <a href="http://www.geeksforgeeks.org/searching-for-patterns-set-2-kmp-algorithm/">this</a>). So overall time complexity of this method would be O(n * m<sup>2</sup>)</p>
<p><strong>Dynamic Programming</strong> can be used to find the longest common substring in O(m*n) time. The idea is to find length of the longest common suffix for all substrings of both strings and store these lengths in a table.</p>
<pre><code> 
The longest common suffix has following optimal substructure property
   LCSuff(X, Y, m, n) = LCSuff(X, Y, m-1, n-1) + 1 if X[m-1] = Y[n-1]
                        0  Otherwise (if X[m-1] != Y[n-1])

The maximum length Longest Common Suffix is the longest common substring.
   LCSubStr(X, Y, m, n)  = Max(LCSuff(X, Y, i, j)) where 1 
Following is C++ implementation of the above solution.
 
/* Dynamic Programming solution to find length of the longest common substring */
#include&lt;iostream&gt;
#include&lt;string.h&gt;
using namespace std;

// A utility function to find maximum of two integers
int max(int a, int b)
{   return (a &gt; b)? a : b; }

/* Returns length of longest common substring of X[0..m-1] and Y[0..n-1] */
int LCSubStr(char *X, char *Y, int m, int n)
{
    // Create a table to store lengths of longest common suffixes of
    // substrings.   Notethat LCSuff[i][j] contains length of longest
    // common suffix of X[0..i-1] and Y[0..j-1]. The first row and
    // first column entries have no logical meaning, they are used only
    // for simplicity of program
    int LCSuff[m+1][n+1];
    int result = 0;  // To store length of the longest common substring

    /* Following steps build LCSuff[m+1][n+1] in bottom up fashion. */
    for (int i=0; i&lt;=m; i++)
    {
        for (int j=0; j&lt;=n; j++)
        {
            if (i == 0 || j == 0)
                LCSuff[i][j] = 0;

            else if (X[i-1] == Y[j-1])
            {
                LCSuff[i][j] = LCSuff[i-1][j-1] + 1;
                result = max(result, LCSuff[i][j]);
            }
            else LCSuff[i][j] = 0;
        }
    }
    return result;
}

/* Driver program to test above function */
int main()
{
    char X[] = &quot;OldSite:GeeksforGeeks.org&quot;;
    char Y[] = &quot;NewSite:GeeksQuiz.com&quot;;

    int m = strlen(X);
    int n = strlen(Y);

    cout &lt;&lt; &quot;Length of Longest Common Substring is &quot; &lt;&lt; LCSubStr(X, Y, m, n);
    return 0;
}
 </code></pre>
<p>Output:</p>
<pre><code> Length of Longest Common Substring is 10 </code></pre>
<p>Time Complexity: O(m*n)<br /> Auxiliary Space: O(m*n)</p>
<p><strong>References:</strong> <a href="http://en.wikipedia.org/wiki/Longest_common_substring_problem" class="uri">http://en.wikipedia.org/wiki/Longest_common_substring_problem</a></p>
<p>The longest substring can also be solved in O(n+m) time using Suffix Tree. We will be covering Suffix Tree based solution in a separate post.</p>
<p><strong>Exercise:</strong> The above solution prints only length of the longest common substring. Extend the solution to print the substring also.</p>
<p>Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above</p>
<p><br /></p>
<div id="source-35" class="section level3">
<h3>Source</h3>
<p><a href="http://www.geeksforgeeks.org/longest-common-substring/" class="uri">http://www.geeksforgeeks.org/longest-common-substring/</a></p>
<p><span>Category: <a href="http://www.geeksforgeeks.org/category/c-strings/">Strings</a></span> <span>Tags: <a href="http://www.geeksforgeeks.org/tag/dynamic-programming/">Dynamic Programming</a></span></p>
</div>
</div>
</body>
</html>

